{"componentChunkName":"component---src-templates-blog-post-js","path":"/android-lambda-with-retrolambda/","result":{"data":{"site":{"siteMetadata":{"title":"Trainto.log()"}},"markdownRemark":{"id":"fff70129-2ea0-52b4-adb1-eccfc5cbbc51","excerpt":"Since Java 8 release Java programmers can take advantages of lambda expression. However it can’t be applied directly to Android development. There are two…","html":"<p>Since Java 8 release Java programmers can take advantages of lambda expression. However it can’t be applied directly to Android development.</p>\n<p>There are two options to use lambda expression for Android development.</p>\n<ul>\n<li>Use Jack tool-chain - <a href=\"https://developer.android.com/guide/platform/j8-jack.html\">Use Java 8 Language Features</a></li>\n<li>Apply <a href=\"https://github.com/orfjackal/retrolambda\">Retrolambda</a></li>\n</ul>\n<p>Using Jack tool-chain supports more features of Java 8 than using Retrolambda, but I recommend Retrolambda here. Because Jack has a few disadvantages.</p>\n<ul>\n<li>Does not support Lint</li>\n<li>Does not support Instant Run</li>\n<li>Does not support full features for every API level</li>\n</ul>\n<br/>\nLet's dive into lambda expression with Retrolambda.\n<p>First, add the following to your build.gradle</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">buildscript <span class=\"token punctuation\">{</span>\n  repositories <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  dependencies <span class=\"token punctuation\">{</span>\n    classpath <span class=\"token string\">'me.tatarka:gradle-retrolambda:3.5.0'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nrepositories <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'com.android.application'</span>\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'me.tatarka.retrolambda'</span></code></pre></div>\n<p>alternatively, new plugin syntax for gradle 2.1+ can be used</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">plugins <span class=\"token punctuation\">{</span>\n  id <span class=\"token string gstring\">\"me.tatarka.retrolambda\"</span> version <span class=\"token string gstring\">\"3.5.0\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Click gradle sync button in AndroidStudio.</p>\n<p>Now coding with lambda expression on android is available.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Traditional</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// With lambda expression</span>\nbutton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-></span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// Traditional</span>\n<span class=\"token class-name\">Handler</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Looper</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMainLooper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhandler<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">handlePushEvent</span><span class=\"token punctuation\">(</span>pushEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// With lambda expression</span>\n<span class=\"token class-name\">Handler</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Looper</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMainLooper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhandler<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">handlePushEvent</span><span class=\"token punctuation\">(</span>pushEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>How simple and beautiful(?) it is!!</p>\n<p>Not only lambda expression, but also method reference is available.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">button<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">printHello</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Android - Lambda with Retrolambda","date":"March 03, 2017","description":null}}},"pageContext":{"slug":"/android-lambda-with-retrolambda/","previous":{"fields":{"slug":"/java-how-to-override-hashcode/"},"frontmatter":{"title":"Java - How to override hashCode"}},"next":{"fields":{"slug":"/kotlin-magic-with-let-apply-run-and-with/"},"frontmatter":{"title":"Kotlin - Kotlin's magic with let, apply, run and with"}}}}}