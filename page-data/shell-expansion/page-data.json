{"componentChunkName":"component---src-templates-blog-post-js","path":"/shell-expansion/","result":{"data":{"site":{"siteMetadata":{"title":"Trainto.log()"}},"markdownRemark":{"id":"49f9dce9-af52-52cc-9643-80a6096cbef1","excerpt":"Usually I’ve been using shell expansion without any notion. However I though it would be meaningful to wrap things up. ‘Shell expansion’ can be divided into…","html":"<p>Usually I’ve been using shell expansion without any notion. However I though it would be meaningful to wrap things up. ‘Shell expansion’ can be divided into 8 types, and detailed explanation can be founded <a href=\"http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_03_04.html\">here</a>.\n<br /></p>\n<h3>Brace expansion</h3>\n<p>Used to generate arbitrary strings.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">}</span>\n<span class=\"token number\">1</span> <span class=\"token number\">2</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span> <span class=\"token number\">5</span> <span class=\"token number\">6</span> <span class=\"token number\">7</span> <span class=\"token number\">8</span> <span class=\"token number\">9</span> <span class=\"token number\">10</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">..</span>d<span class=\"token punctuation\">}</span>\na b c d\n\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span><span class=\"token punctuation\">..</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\n<span class=\"token number\">1</span> <span class=\"token number\">3</span> <span class=\"token number\">5</span> <span class=\"token number\">7</span> <span class=\"token number\">9</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello \"</span><span class=\"token punctuation\">{</span>foo,bar<span class=\"token punctuation\">}</span>\nHello foo Hello bar</code></pre></div>\n<br />\n<h3>Tilde expansion</h3>\n<p>Used to expand to several pathnames such as home directory, current working directory and previous working directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> ~\n/home/user\n\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> ~user2\n/home/user2\n\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> ~+\n<span class=\"token punctuation\">(</span>current working directory<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> ~-\n<span class=\"token punctuation\">(</span>previous working directory<span class=\"token punctuation\">)</span></code></pre></div>\n<br />\n<h3>Shell parameter and Variable expansion</h3>\n<p>Parameter expansion is introduced with ’$’ symbol. It looks like below.</p>\n<p>${expressoin}</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> <span class=\"token assign-left variable\">str1</span><span class=\"token operator\">=</span>hello\n<span class=\"token operator\">></span> <span class=\"token assign-left variable\">str2</span><span class=\"token operator\">=</span>foo\n<span class=\"token operator\">></span> <span class=\"token assign-left variable\">str3</span><span class=\"token operator\">=</span>bar\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${str1}</span>\nhello\n\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${str2}</span>\nfoo\n\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">${str3}</span>\nbar</code></pre></div>\n<br />\n<h3>Command substitution</h3>\n<p>Command substitution allows the output of a command to replace the command itself. It comes with ’$’ symbol and parenthesis like below.</p>\n<p>$(cmds)</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span><span class=\"token variable\">)</span></span>\nMon Mar <span class=\"token number\">14</span> 00:12:57 PDT <span class=\"token number\">2016</span></code></pre></div>\n<br />\n<h3>Arithmetic expansion</h3>\n<p>Arithmetic expansion allows the evaluation of an arithmetic expression and the substitution of the result. It comes with ’$’ symbol and double parenthesis.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> <span class=\"token variable\"><span class=\"token variable\">$((</span>num1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>num2<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>num3<span class=\"token operator\">=</span>num1<span class=\"token operator\">*</span>num2<span class=\"token variable\">))</span></span>\n<span class=\"token number\">2</span>: <span class=\"token builtin class-name\">command</span> not found\n\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>num1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>num2<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>num3<span class=\"token operator\">=</span>num1<span class=\"token operator\">*</span>num2<span class=\"token variable\">))</span></span>\n<span class=\"token number\">2</span></code></pre></div>\n<br />\n<h3>Process substitution</h3>\n<p>Process substitution is supported on systems that support named pipes or the /dev/fd method of naming open files. It comes with pipeline expression ’>’, ’&#x3C;’ and parenthesis.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># Note 3 commands following show the same result</span>\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token function\">ls</span><span class=\"token punctuation\">)</span>\n/dev/fd/63\n\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">cat</span><span class=\"token punctuation\">)</span>\n/dev/fd/63\n\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> /dev/fd/63\n/dev/fd/63\n\n<span class=\"token operator\">></span> <span class=\"token function\">cat</span> -vte <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"<span class=\"token environment constant\">$IFS</span>\"</span><span class=\"token punctuation\">)</span>\n^I$</code></pre></div>\n<br />\n<h3>Word splitting</h3>\n<p>the results of parameter expansion, command substitution, and arithmetic expansion that did not occur within double quotes will be applied to word splitting by ‘IFS’ value. The default ‘IFS’ values are sequences of <space>, <tab>, and <newline>.</p>\n<p>If you want to check IFS value, you can do this,</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> <span class=\"token builtin class-name\">set</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"IFS\"</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span>$<span class=\"token string\">' <span class=\"token entity\" title=\"\\t\">\\t</span><span class=\"token entity\" title=\"\\n\">\\n</span>'</span></code></pre></div>\n<br />\n<h3>File name expansion</h3>\n<p>After word splitting, Bash scans each word for the characters ’*’, ’?’, and ’[‘.</p>\n<p>See <a href=\"https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html#Pattern-Matching\">here</a> for Pattern-Matching. And note that it does not use Regular Expression.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token operator\">></span> <span class=\"token function\">ls</span>\na b c\n\n<span class=\"token operator\">></span> *\na: <span class=\"token builtin class-name\">command</span> not found\n\n<span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> *\na b c</code></pre></div>","frontmatter":{"title":"Shell expansion","date":"March 14, 2016","description":null}}},"pageContext":{"slug":"/shell-expansion/","previous":{"fields":{"slug":"/bach-cello-suite-no1/"},"frontmatter":{"title":"Bach Cello Suite No.1"}},"next":{"fields":{"slug":"/strict-mode-in-javascript/"},"frontmatter":{"title":"Strict mode in Javascript"}}}}}