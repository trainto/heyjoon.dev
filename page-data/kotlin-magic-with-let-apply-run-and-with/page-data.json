{"componentChunkName":"component---src-templates-blog-post-js","path":"/kotlin-magic-with-let-apply-run-and-with/","result":{"data":{"site":{"siteMetadata":{"title":"Trainto.log()"}},"markdownRemark":{"id":"9ede6531-bc13-5e26-849e-ba21cbd811d0","excerpt":"Kotlin’s Standard.kt provides some higher-order functions implementing idiomatic patterns like let, apply, run and with. With the help of these functions, your…","html":"<p>Kotlin’s <a href=\"https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt\">Standard.kt</a> provides some higher-order functions implementing idiomatic patterns like let, apply, run and with.</p>\n<p>With the help of these functions, your code can be more simple and elegant.</p>\n<p>The only challenge of using these functions(let, apply, run and with) is that it feels they are very much similar.</p>\n<p>Let’s go through how to handle this Kotlin’s magic.</p>\n<h2>let</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */</span>\n<span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">let</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> R <span class=\"token punctuation\">{</span>\n    contract <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>let() passes the object, which calls it, to the block, and returns the result of the block.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> student <span class=\"token operator\">=</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"David\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> result <span class=\"token operator\">=</span> student<span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span>age <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 40</span></code></pre></div>\n<p>This is a very simple example, but consider using let with safe calls(?.). You don’t have to bother with if (obj != null) {…} anymore. Check below.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// without safe calls and let</span>\n<span class=\"token keyword\">var</span> strRes<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    strRes <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>app_name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// with safe calls and let</span>\n<span class=\"token keyword\">var</span> strRes<span class=\"token operator\">:</span>String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> context<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>app_name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is quite powerful, isn’t it?</p>\n<br/>\n<h2>apply</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */</span>\n<span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Unit<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">{</span>\n    contract <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>apply() passes the object, which calls it, to the block’s receiver, and returns the object itself.</p>\n<p>Let’s check out how apply() can be used.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> major<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">var</span> mobileNumber<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">var</span> address<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> newStudent <span class=\"token operator\">=</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Joon\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n    major <span class=\"token operator\">=</span> <span class=\"token string\">\"Computer Science\"</span>\n    mobileNumber <span class=\"token operator\">=</span> <span class=\"token string\">\"+82-10-1111-1111\"</span>\n    address <span class=\"token operator\">=</span> <span class=\"token string\">\"Seoul\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With apply, new Student instance initialized in a convenient way.</p>\n<br />\n<h2>run</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/**\n * Calls the specified function [block] and returns its result.\n */</span>\n<span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> R <span class=\"token punctuation\">{</span>\n    contract <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */</span>\n<span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span> T<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> R <span class=\"token punctuation\">{</span>\n    contract <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are 2 types of run() function.</p>\n<p>Using run() independently without object, it will be treated like anonymous function without parameters. Just like any other functions, it can return nothing, or return something.</p>\n<p>When run() called from objects, the object will be passed to the block, and returns result of the block.</p>\n<p>Maybe it is confused with apply(), but remember that they return different type.(apply returns an object which it is called, and run returns the result of the block.)</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> major<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">var</span> mobileNumber<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">var</span> address<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> newStudent <span class=\"token operator\">=</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Joon\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n    major <span class=\"token operator\">=</span> <span class=\"token string\">\"Computer Science\"</span>\n    mobileNumber <span class=\"token operator\">=</span> <span class=\"token string\">\"+82-10-1111-1111\"</span>\n    address <span class=\"token operator\">=</span> <span class=\"token string\">\"Seoul\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> homework <span class=\"token operator\">=</span> newStudent<span class=\"token punctuation\">.</span><span class=\"token function\">run</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>major <span class=\"token operator\">===</span> <span class=\"token string\">\"Computer Science\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"Implementing LinkedList\"</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"No homework!!\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">println</span><span class=\"token punctuation\">(</span>homework<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Implementing LinkedList\"</span></code></pre></div>\n<br/>\n<h2>with</h2>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */</span>\n<span class=\"token label symbol\">@kotlin</span><span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>InlineOnly\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token operator\">></span> <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>receiver<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> block<span class=\"token operator\">:</span> T<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> R <span class=\"token punctuation\">{</span>\n    contract <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">callsInPlace</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> InvocationKind<span class=\"token punctuation\">.</span>EXACTLY_ONCE<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> receiver<span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>with() passes its parameter to the block as a receiver, and returns the result of the block.</p>\n<p>Actually with() is almost same with run(), except where the object passed to the block is. And run() can be used with safe calls, but with() can’t.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> age<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> major<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">var</span> mobileNumber<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">var</span> address<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> newStudent <span class=\"token operator\">=</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Joon\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span>\n    major <span class=\"token operator\">=</span> <span class=\"token string\">\"Computer Science\"</span>\n    mobileNumber <span class=\"token operator\">=</span> <span class=\"token string\">\"+82-10-1111-1111\"</span>\n    address <span class=\"token operator\">=</span> <span class=\"token string\">\"Seoul\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> homework <span class=\"token operator\">=</span> <span class=\"token function\">with</span><span class=\"token punctuation\">(</span>newStudent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>major <span class=\"token operator\">===</span> <span class=\"token string\">\"Computer Science\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"Implementing LinkedList\"</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"No homework!!\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>There are another useful funtions in Standard.kt like also, takeIf, takeUnless and repeat. Refer to Standard.kt, and examine them with simple code. I believe it will make your kotlin code more beautiful.</p>","frontmatter":{"title":"Kotlin - Kotlin's magic with let, apply, run and with","date":"February 01, 2018","description":null}}},"pageContext":{"slug":"/kotlin-magic-with-let-apply-run-and-with/","previous":{"fields":{"slug":"/android-lambda-with-retrolambda/"},"frontmatter":{"title":"Android - Lambda with Retrolambda"}},"next":{"fields":{"slug":"/android-replace-eventbus-with-livedata/"},"frontmatter":{"title":"Android - Replace EventBus with LiveData"}}}}}